// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ourshop.it.domain;

import com.ourshop.it.domain.Party;
import com.ourshop.it.domain.PartyDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PartyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PartyDataOnDemand: @Component;
    
    private Random PartyDataOnDemand.rnd = new SecureRandom();
    
    private List<Party> PartyDataOnDemand.data;
    
    public Party PartyDataOnDemand.getNewTransientParty(int index) {
        Party obj = new Party();
        setAddress(obj, index);
        setAlternateEmail(obj, index);
        setArea(obj, index);
        setContactPerson(obj, index);
        setEmail(obj, index);
        setGovtRegistration(obj, index);
        setMobile(obj, index);
        setPartyName(obj, index);
        setPartyType(obj, index);
        setPhone(obj, index);
        return obj;
    }
    
    public void PartyDataOnDemand.setAddress(Party obj, int index) {
        String address = "address_" + index;
        obj.setAddress(address);
    }
    
    public void PartyDataOnDemand.setAlternateEmail(Party obj, int index) {
        String alternateEmail = "foo" + index + "@bar.com";
        obj.setAlternateEmail(alternateEmail);
    }
    
    public void PartyDataOnDemand.setArea(Party obj, int index) {
        String area = "area_" + index;
        obj.setArea(area);
    }
    
    public void PartyDataOnDemand.setContactPerson(Party obj, int index) {
        String contactPerson = "contactPerson_" + index;
        obj.setContactPerson(contactPerson);
    }
    
    public void PartyDataOnDemand.setEmail(Party obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void PartyDataOnDemand.setGovtRegistration(Party obj, int index) {
        String govtRegistration = "govtRegistration_" + index;
        obj.setGovtRegistration(govtRegistration);
    }
    
    public void PartyDataOnDemand.setMobile(Party obj, int index) {
        String mobile = "mobile_" + index;
        obj.setMobile(mobile);
    }
    
    public void PartyDataOnDemand.setPartyName(Party obj, int index) {
        String partyName = "partyName_" + index;
        obj.setPartyName(partyName);
    }
    
    public void PartyDataOnDemand.setPartyType(Party obj, int index) {
        String partyType = "partyType_" + index;
        obj.setPartyType(partyType);
    }
    
    public void PartyDataOnDemand.setPhone(Party obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public Party PartyDataOnDemand.getSpecificParty(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Party obj = data.get(index);
        Long id = obj.getId();
        return Party.findParty(id);
    }
    
    public Party PartyDataOnDemand.getRandomParty() {
        init();
        Party obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Party.findParty(id);
    }
    
    public boolean PartyDataOnDemand.modifyParty(Party obj) {
        return false;
    }
    
    public void PartyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Party.findPartyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Party' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Party>();
        for (int i = 0; i < 10; i++) {
            Party obj = getNewTransientParty(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
